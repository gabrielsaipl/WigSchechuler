@using Calendar.Pages
<div class="popup-container" style="@popupStyle">
    <div class="popup">
        <div class="popup-header">
            <h5>Adicionar Evento</h5>
            <div class="close" @onclick="Close">
                <span aria-hidden="true">×</span>
            </div>
            @{
                RenderCounter++;
            }
        </div>
        <div class="popup-body">
            <form>
                <div class="form-group">
                    <label for="eventName">Nome do Evento:</label>
                    <input type="text" class="form-control" id="eventName" @bind="eventName" />
                </div>
                <div class="form-group">
                    <label for="eventName">Descrição do Evento:</label>
                    <input type="text" class="form-control" id="eventDescription" @bind="eventDescription" />
                </div>
                <div class="form-group">
                    <label for="eventStartDate">Data Inicial:</label>
                    <input type="date" onfocus="this.showPicker()" class="form-control" id="eventStartDate" @bind="selectedDate" />
                </div>
                <div class="form-group">
                    <label for="eventEndDate">Data Final:</label>
                    <input type="date" onfocus="this.showPicker()" class="form-control" id="eventEndDate" @bind="EndDate" />
                </div>
                <div class="form-group">
                    <label for="eventResource">Recurso:</label>
                    <div>
                        <select class="form-control" @onchange="OnSelectedResource">
                            @{
                                if (Resource == null || (Resource.Id == 0 && Resource.Text == null))
                                {
                                    ResourceData resource = ResourceData.FirstOrDefault();
                                    Resource = new ResourceData
                                    {
                                        Id = resource.Id,
                                        Text = resource.Text
                                    };
                                }
                            }
                            <option selected="@Resource.Text @Resource.Id">Clicked/Default:@Resource.Text @Resource.Id</option>
                            @if (!ListResources.Contains(SelectedResourceFromDropDown) && RenderCounter > 1 && ListResources.Count == 0)
                            {
                                if (SelectedResourceFromDropDown != null)
                                {
                                   ListResources.Add(SelectedResourceFromDropDown); 
                                }
                                
                            }
                            @foreach (var resource in ResourceData)
                            {
                                <option>@resource.Text @resource.Id</option>
                            }
                        </select>
                        Selected:
                        @if (ListResources.Any())
                        {
                            <div>
                                @foreach (var item in ListResources)
                                {
                                    var str = $"{@item.Text} {@item.Id} ";
                                    <div @onclick=" () => {ListResources.Remove(item); StateHasChanged();}">@str</div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </form>
        </div>
        <div class="popup-footer text-end">
            <button class="btn btn-primary" @onclick="AddEvent">Adicionar Evento</button>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public DateTime SelectedDate
    {
        get => selectedDate;
        set
        {
            selectedDate = value;

            if (popupOpened)
            {
                EndDate = value;
            }
        }
    }
    [Parameter]
    public bool ShowPopup
    {
        get => popupOpened;
        set
        {
            popupOpened = value;

            if (popupOpened)
            {
                EndDate = SelectedDate;
            }
        }
    }
    [Parameter]
    public List<ResourceData> ResourceData { get; set; }
    [Parameter]
    public Day SelectedDay { get; set; }
    /* Resource that is passed from parent*/
    [Parameter]
    public ResourceData Resource { get; set; } = new ResourceData();
    [Parameter]
    public Action<string, DateTime, DateTime, string, Day, List<ResourceData>> OnEventAdded { get; set; }
    /* Resource Returned on the AddEvent Method */
    public List<ResourceData> ListResources = new List<ResourceData>();
    private string eventName;
    private string eventDescription;
    private DateTime EndDate;
    private DateTime selectedDate;
    private string popupStyle => ShowPopup ? "display:block" : "display:none";
    private bool popupOpened = false;
    private ResourceData SelectedResourceFromDropDown = new ResourceData();
    private int RenderCounter = 0;
    protected override void OnInitialized()
    {
        if (Resource == null)
        {
            ResourceData resource = ResourceData.FirstOrDefault();
            Resource = new ResourceData
                {
                    Id = resource.Id,
                    Text = resource.Text
                };
        }
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        SelectedResourceFromDropDown = Resource;
    }

    private void AddEvent()
    {
        if (SelectedDate <= EndDate && IsValid())
        {
            OnEventAdded.Invoke(eventName, SelectedDate, EndDate, eventDescription, SelectedDay, ListResources);
            ListResources.Clear();
        }
        else { throw new InvalidOperationException($"Invalid Dates"); }
        eventDescription = "";
        eventName = "";
    }
    private void Close()
    {
        eventDescription = "";
        eventName = "";
        ListResources.Clear();
        ShowPopup = false;
        StateHasChanged();
    }

    private bool IsValid()
    {

        return !string.IsNullOrEmpty(eventName)
            && !string.IsNullOrEmpty(eventDescription)
            && selectedDate != default(DateTime)
            && EndDate != default(DateTime)
            && Resource != null && Resource.Id != 0;
    }

    private void OnSelectedResource(ChangeEventArgs e)
    {
        string newString = "";
        if (e.Value.ToString().Length == 10)
        {
            newString = e.Value.ToString().Remove(0, 9);
        }
        else if (e.Value.ToString().Length > 17)
        {
            newString = e.Value.ToString().Remove(0, 25);
        }

        var newInt = int.Parse(newString);

        SelectedResourceFromDropDown = ResourceData.FirstOrDefault(r => r.Id == newInt);
        if (!ListResources.Contains(SelectedResourceFromDropDown))
        {
            ListResources.Add(SelectedResourceFromDropDown);
        }
    }

}
