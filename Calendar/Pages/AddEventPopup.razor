@using Calendar.Pages
<div class="popup-container" style="@popupStyle">
    <div class="popup">
        <div class="calendar-header">
        <h3>Adicionar Evento</h3>
        <div class="close" @onclick="Close"> Fechar X</div>
        </div>
        <form>
            <div class="form-group">
                <label for="eventName">Nome do Evento:</label>
                <input type="text" class="form-control" id="eventName" @bind="eventName" />
            </div>
            <div class="form-group">
                <label for="eventName">Descrição do Evento:</label>
                <input type="text" class="form-control" id="eventDescription" @bind="eventDescription" />
            </div>
            <div class="form-group">
                <label for="eventStartDate">Data Inicial do Evento:</label>
                <input type="date" class="form-control" id="eventStartDate" @bind="selectedDate" />
            </div>
            <div class="form-group">
                <label for="eventEndDate">Data Final do Evento:</label>
                <input type="date" onfocus="this.showPicker()" class="form-control" id="eventEndDate" @bind="EndDate" />
            </div>
            <div class="form-group">
                <label for="eventResource">Recurso:</label>
                <div>
                    <select class="form-control">
                        @{
                            if (Resource == null || (Resource.Id == 0 && Resource.Text == null))
                            {
                                ResourceData resource = ResourceData.FirstOrDefault();
                                Resource = new ResourceData
                                {
                                    Id = resource.Id,
                                    Text = resource.Text
                                };
                            }
                        }
                        <option>Clicked/Default: @Resource.Text @Resource.Id</option>
                        @foreach (var resource in ResourceData)
                        {
                            <option>@resource.Text @resource.Id</option>
                        }

                    </select>
                </div>
            </div>
            <button type="submit" class="btn btn-primary" @onclick="AddEvent">Adicionar Evento</button>
        </form>
    </div>
</div>
@code {
    [Parameter]
    public DateTime SelectedDate
    {
        get => selectedDate;
        set
        {
            selectedDate = value;

            if (popupOpened)
            {
                EndDate = value;
            }
        }
    }
    [Parameter]
    public bool ShowPopup
    {
        get => popupOpened;
        set
        {
            popupOpened = value;

            if (popupOpened)
            {
                EndDate = SelectedDate;
            }
        }
    }
    [Parameter]
    public List<ResourceData> ResourceData { get; set; }
    [Parameter]
    public Day SelectedDay { get; set; }
    [Parameter]
    public ResourceData Resource { get; set; } = new ResourceData();
    [Parameter]
    public Action<string, DateTime, DateTime, string, Day, ResourceData> OnEventAdded { get; set; }

    private string eventName;
    private string eventDescription;
    private DateTime EndDate;
    private DateTime selectedDate;
    private string popupStyle => ShowPopup ? "display:block" : "display:none";
    private bool popupOpened = false;

    protected override void OnInitialized()
    {

        if (Resource == null)
        {
            ResourceData resource = ResourceData.FirstOrDefault();
            Resource = new ResourceData
                {
                    Id = resource.Id,
                    Text = resource.Text
                };
        }
        base.OnInitialized();
    }

    private void AddEvent()
    {
        if (SelectedDate <= EndDate && IsValid())
        {
            OnEventAdded.Invoke(eventName, SelectedDate, EndDate, eventDescription, SelectedDay, Resource);
        }
        else { throw new InvalidOperationException($"Invalid Dates"); }

    }
    private void Close()
    {
        ShowPopup = false;
        StateHasChanged();
    }

    private bool IsValid()
    {

        return !string.IsNullOrEmpty(eventName)
            && !string.IsNullOrEmpty(eventDescription)
            && selectedDate != default(DateTime)
            && EndDate != default(DateTime)
            && Resource != null && Resource.Id != 0;
    }


}
